import type { Capabilities, Options, Services } from '@wdio/types';
import { ModuleRequireService } from '../utils';
interface TestrunnerOptionsWithParameters extends Omit<Options.Testrunner, 'capabilities'> {
    watch?: boolean;
    spec?: string[];
    suite?: string[];
    capabilities?: Capabilities.RemoteCapabilities;
}
interface MergeConfig extends Omit<Partial<TestrunnerOptionsWithParameters>, 'specs' | 'exclude'> {
    specs?: string | string[];
    exclude?: string | string[];
}
interface CurrentPathFinder {
    getcwd(): string;
}
interface LoadConfigFile {
    loadFile<T>(path: string): T;
}
interface IsFileDetector {
    isFile(path: string): boolean;
}
interface DeterminesAbsolutePath {
    ensureAbsolutePath(path: string): string;
}
interface Globber {
    glob(pattern: string): string[];
}
export interface PathService extends CurrentPathFinder, LoadConfigFile, IsFileDetector, Globber, DeterminesAbsolutePath {
}
export default class ConfigParser {
    private _config;
    private _capabilities;
    private _pathService;
    private _moduleRequireService;
    constructor(pathService?: PathService, moduleRequireService?: ModuleRequireService);
    autoCompile(): void;
    /**
     * merges config file with default values
     * @param {String} filename path of file relative to current directory
     */
    addConfigFile(filename: string): void;
    /**
     * merge external object with config object
     * @param  {Object} object  desired object to merge into the config object
     */
    merge(object?: MergeConfig): void;
    /**
     * Add hooks from an existing service to the runner config.
     * @param {Object} service - an object that contains hook methods.
     */
    addService(service: Services.Hooks): void;
    /**
     * get excluded files from config pattern
     */
    getSpecs(capSpecs?: string[], capExclude?: string[]): string[];
    /**
     * sets config attribute with file paths from filtering
     * options from cli argument
     *
     * @param  {String} cliArgFileList  list of files in a string from
     * @param  {Object} config  config object that stores the spec and exclude attributes
     * cli argument
     * @return {String[]} List of files that should be included or excluded
     */
    setFilePathToFilterOptions(cliArgFileList: string[], config: string[]): string[];
    /**
     * return configs
     */
    getConfig(): Required<Options.Testrunner>;
    /**
     * return capabilities
     */
    getCapabilities(i?: number): Capabilities.DesiredCapabilities | Capabilities.W3CCapabilities | (Capabilities.DesiredCapabilities | Capabilities.W3CCapabilities)[] | Capabilities.MultiRemoteCapabilities;
    /**
     * returns a flatten list of globed files
     *
     * @param  {String[]} filenames  list of files to glob
     * @return {String[]} list of files
     */
    static getFilePaths(patterns: string[], omitWarnings?: boolean, findAndGlob?: CurrentPathFinder & Globber & DeterminesAbsolutePath): string[];
}
export {};
//# sourceMappingURL=ConfigParser.d.ts.map